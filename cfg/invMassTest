#format is like this:
#typeOfParameter :: parameterOrObjectName :: option1=value2; option2=(this,is,a,list)


## general options
## -----------------------------------------------------------
variable :: bundledate       :: 2018-07-18
variable :: nBunches         :: 2760
variable :: revFreq          :: 11246

variable :: tiers            :: (thresholds)
#variable :: tiers            :: (variations)

variable :: varBins          :: (30,50)
#variable :: varBins          :: (10,20,30,40,50,60,70,80,90,100)
##variable :: varBins          :: (100,140,275,425,575,700,850,1000)
variable :: varError         :: 0.2
variable :: varInterpol      :: linear
variable :: varLeg           :: 1
variable :: varCut           :: 1
variable :: varPrecision     :: 2
variable :: varIterations    :: 5
variable :: useNominalBwF    :: False



## samples (always all samples are used!)
## -----------------------------------------------------------
sample   :: neutrinos        :: path:=input/2018-07-14_mariav1b/neutrinos.root; tree:=l1PhaseIITree/L1PhaseIITree


## physics objects at trigger level
## -----------------------------------------------------------
## Electrons and Photons
object :: eg           :: basebranch:=eg        ; variables:=(Et,Eta,Phi,Bx,Iso,zVtx,HwQual); \
                          leading:=Et; lengthbranch:=nEG; onToOff:=0
object :: tkEG         :: basebranch:=tkEG      ; variables:=(Et,Eta,Phi,Bx,TrkIso,zVtx); \
                          leading:=Et; lengthbranch:=nTkEG; onToOff:=0
object :: tkEM         :: basebranch:=tkEM      ; variables:=(Et,Eta,Phi,Bx,TrkIso,zVtx); \
                          leading:=Et; lengthbranch:=nTkEM; onToOff:=0
## Muons
object :: mu           :: basebranch:=muon      ; variables:=(Et,Eta,Phi,EtaAtVtx,PhiAtVtx,Bx,Chg,Iso,Qual); \
                          leading:=Et; lengthbranch:=nMuons; onToOff:=0
object :: muKF         :: basebranch:=muonKF    ; variables:=(Et,Eta,Phi,Chg,Qual,Bx); \
                          leading:=Et; lengthbranch:=nMuonsKF; onToOff:=0
object :: tkMu         :: basebranch:=tkMuon    ; variables:=(Et,Eta,Phi,Chg,Iso,TrkIso,Quality,zVtx,Bx); \
                          leading:=Et; lengthbranch:=nTkMuons; onToOff:=0
## Taus
object :: tau          :: basebranch:=tau       ; variables:=(Et,Eta,Phi,Bx,Iso,NTT,HasEM,isMerged,HwQual); \
                          leading:=Et; lengthbranch:=nTaus; onToOff:=0
object :: tkTau        :: basebranch:=tkTau     ; variables:=(Et,Eta,Phi,Bx,TrkIso,zVtx); \
                          leading:=Et; lengthbranch:=nTkTau; onToOff:=0
## Jets
object :: jet          :: basebranch:=jet       ; variables:=(Et,Eta,Phi,Bx); \
                          leading:=Et; lengthbranch:=nJets; onToOff:=0
object :: pfJet        :: basebranch:=puppiJet  ; variables:=(Et,Eta,Phi,Bx,zVtx,EtUnCorr); \
                          leading:=Et; lengthbranch:=nPuppiJets; onToOff:=0
object :: tkCaloJet    :: basebranch:=tkCaloJet ; variables:=(Et,Eta,Phi,Bx,zVtx); \
                          leading:=Et; lengthbranch:=nTkCaloJets; onToOff:=0
object :: trackerJet   :: basebranch:=trackerJet; variables:=(Et,Eta,Phi,Bx,zVtx); \
                          leading:=Et; lengthbranch:=nTrackerJets; onToOff:=0
## HT
object :: trackerHt    :: basebranch:=trackerHT  ; variables:=(Et=); \
                          leading:=Et; isFlat:=True; onToOff:=0 
object :: pfHt         :: basebranch:=puppiHT   ; variables:=(Et=); \
                          leading:=Et; isFlat:=True; onToOff:=0
## MHT
object :: trackerMHt   :: basebranch:=trackerMHT  ; variables:=(Et=,Phi,Bx); \
                          leading:=Et; isFlat:=True; onToOff:=0
object :: pfMHt        :: basebranch:=puppiMHT   ; variables:=(Et,Phi); \
                          leading:=Et; isFlat:=True; onToOff:=0
## MET
object :: trackerMet   :: basebranch:=trackerMet  ; variables:=(Et,Phi,Bx,SumEt); \
                          leading:=Et; isFlat:=True; onToOff:=0
object :: pfMet        :: basebranch:=puppiMET    ; variables:=(Et,Phi); \
                          leading:=Et; isFlat:=True; onToOff:=0


## function aliases
## -----------------------------------------------------------
function :: regionalEta      :: args:=(x,cut); lambda:= cut<=x and x<=(21.-cut)
function :: notMatched       :: args:=(eta1,eta2,phi1,phi2); lambda:= math.sqrt(math.pow(abs(abs(eta1)-abs(eta2)),2) + math.pow(abs(phi1-phi2) if abs(phi1-phi2)<=math.pi else 2*math.pi-abs(phi1-phi2),2))>0.1
function :: deltaR           :: args:=(eta1,eta2,phi1,phi2); lambda:= math.sqrt(math.pow(abs(eta1-eta2),2) + math.pow(abs(phi1-phi2) if abs(phi1-phi2)<=math.pi else 2*math.pi-abs(phi1-phi2),2))


## trigger paths
## -----------------------------------------------------------

#trigger  :: L1_TriTkJetVtxMll  :: multi1:=(trackerJet, 4, 41.7, Bx==0, abs(Eta)<3.0, (True, abs[zVtx-elm1.zVtx]<1, abs[zVtx-elm1.zVtx]<1, abs[zVtx-elm1.zVtx]<1));

#trigger  :: L1_TriTkJetVtxMll  :: multi1:=(trackerJet, 4, 41.7, Bx==0, abs(Eta)<3.0, (True, abs[zVtx-elm1.zVtx]<1, abs[zVtx-elm1.zVtx]<1, abs[zVtx-elm1.zVtx]<1), $[1:2]mass>100<150);

#trigger  :: L1_TriTkJetVtxMll  :: multi1:=(trackerJet, 4, 41.7, Bx==0, abs(Eta)<3.0, (True, abs[zVtx-elm1.zVtx]<1, abs[zVtx-elm1.zVtx]<1, abs[zVtx-elm1.zVtx]<1), $[3:2]mass>100<150); 

#trigger  :: L1_TriTkJetVtxMll  :: multi1:=(trackerJet, 4, 41.7, Bx==0, abs(Eta)<3.0, (True, abs[zVtx-elm1.zVtx]<1, abs[zVtx-elm1.zVtx]<1, abs[zVtx-elm1.zVtx]<1), $[1:2]mass>=170); 

trigger  :: L1_TriTkJetVtxMll  :: multi1:=(trackerJet, 4, 41.7, Bx==0, abs(Eta)<3.0, (True, abs[zVtx-elm1.zVtx]<1, abs[zVtx-elm1.zVtx]<1, abs[zVtx-elm1.zVtx]<1), $[1:2]mass>160<50); 

